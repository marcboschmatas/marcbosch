---
title: "Reutilitzant dades públiques: escoles a OpenStreetMap"
author: "Marc Bosch Matas"
date: "2022-12-11"
categories: [OpenStreetMap, OpenData, Dades Obertes, R]
execute:
  warning: false
  error: false
  message: false
format:
  html: 
    code-fold: true
    code-summary: "Codi R"
---

Avui comparteixo una de les coses que faig quan la vida em deixa: editar OpenStreetMap. Si coneixeu aquest projecte, consisteix en una gran base de dades geolocalitzada que editem persones de tot arreu utilitzant fonts de coneixement lliures. Bàsicament ho faig per activisme: OpenStreetMap pot ser una alternativa a Google Maps i altres projectes que donen beneficis a les grans tecnològiques. No corre el risc que ho compri l'Elon Musk de torn ni de patir censures arbitràries. Més important, qualsevol persona el pot editar, i el criteri de què és important el marquem les persones que hi participem. D'altra banda, els editors i editores catalans som una colla de gent bastant simpàtica i ens toca més l'aire que si editéssim la Viquipèdia. D'altra banda, també fem molta cosa amb ordinadors per tenir el màxim de dades possibles amb el mínim esforç.

Fa no massa, vam obtenir permís per fer servir el [Directori de Centres Educatius](https://analisi.transparenciacatalunya.cat/Educaci-/Directori-de-centres-docents-anual-Base-2020/kvmv-ahh4) del Departament d'Educació. En aquest post, explicaré com agafem les dades i les preparem per a pujar-les a OpenStreetMap. Per exemple, amb el cas de Palafrugell. Així, el que farem serà el següent.

1) Baixar totes les dades de centres educatius de Palafrugell que tenen un número de referència del departament d'Educació utilitzant l'API Overpass.

2) Baixar les dades del Directori de Centres correspondent als centres que volem completar.

3) Tractar les dades i afegir les que falten a la taula d'OpenStreetMap.

4) Comprovar que tot estigui bé i pujar les dades fent servir l'editor JOSM.

```{r}
#| output: false

library(sf) # tractar shapefiles
library(osmdata) # baixar data d'OSM
library(tmap) # fer mapes
library(tmaptools) # baixar mapa base
library(tidyverse) # tractar taules
library(httr) # baixar dades d'internet
library(jsonlite) # convertir JSONs a taules
library(rvest) # llegir webs
```



Comencem per baixar les dades d'OpenStreetMap i representar-les en un mapa.

```{r}
escoles <- opq("Palafrugell") |> 
  add_osm_features("[\"amenity\"=\"school\"][\"ref\"]") |> # this is a lot more cumbersome but allows to filter for missing tags
  osmdata_sf()

escoles_punts <- escoles$osm_points
escoles_pol <- escoles$osm_polygons
escoles_mpol <- escoles$osm_multipolygons

escoles_osm <- escoles_pol |> 
  st_drop_geometry() |> 
  bind_rows(st_drop_geometry(escoles_mpol))
knitr::kable(escoles_osm, style = "pipe")
```


```{r}
#| fig-align: "right"
bm <- read_osm(escoles_punts)

tm_shape(bm) + 
  tm_rgb() + 
  tm_shape(escoles_pol) + 
  tm_borders(col = modthemes::dubois_blue,
             lwd = 2) + 
  tm_shape(escoles_mpol) + 
  tm_borders(col = modthemes::dubois_blue,
             lwd = 2)
```

Veiem que ens surten alguns objectes sense codi de referència, però no ens hauria de preocupar massa. Són objectes com patis o pistes poliesportives que formen part de les relacions (és a dir, col·leccions d'objectes) de les escoles. Ara toca baixar-nos les dades del Departament d'Educació. Ho fem amb les llibreries ```httr``` i ```jsonlite``` que ens permeten crear [una URL](https://analisi.transparenciacatalunya.cat/resource/kvmv-ahh4.json?$query=SELECT%20*%20WHERE%20codi_centre%20IN%20('17002491',%20'17002511',%20'17006782',%20'17002557',%20'17002521',%20'17002481',%20'17004876',%20'17008523',%20'17002545')%20AND%20curs='2022/2023') on hi hagi les dades de tots els centres que ens interessen, baixar-nos la informació i organitzar-la en forma de taula. 


```{r}
# crear vector de codis únics
refs <- unique(c(escoles_pol$ref, escoles_mpol$ref))
refs <- refs[!is.na(refs)]
# crear una variable character amb tots els codis separats per codis
reftext <- sapply(refs, \(x) paste0("'",str_pad(x, width=8, pad = 0),"'")) |> 
  paste(collapse = ", ")

# generar una url de l'API de dades obertes de la Generalitat que ens
baseurl <- "https://analisi.transparenciacatalunya.cat/resource/kvmv-ahh4.json?$query="


query = paste0("SELECT * WHERE codi_centre IN (", reftext, ") AND curs='2022/2023'")
query <- str_replace_all(query," ","%20")

# descarregar les dades i passar-les a format taula
escoles_gene <- GET(paste0(baseurl,query)) |> 
  content(as = "text") |> 
  fromJSON()

knitr::kable(escoles_gene, style = "pipe")
```


Tenim un munt de variables, moltes de les quals ens interessen. Algunes les podem incorporar tal i com van i d'altres voldran una mica de feina. Comencem per l'adreça. Veiem que hi ha quatre camps vinculats amb l'adreça: ```addr.city```, ```addr.housenumber``` (número d'edifici), ```addr.postcode``` (codi postal) i ```addr.street``` (carrer). D'altra banda, podem agafar directament la web, el correu electrònic i  com el nom del titular. La titularitat també es pot agafar directament, però cal traduir-ho a l'anglès. També cal afegir els prefixos internacionals als camps de telèfon i fax.

```{r}
escoles_gene_osm <- escoles_gene |> 
  select(-c(curs, codi_titularitat, codi_naturalesa, 
            codi_delegaci, nom_delegaci, codi_comarca,
            codi_municipi, codi_municipi_6, 
            codi_localitat, codi_districte_municipal, 
            nom_comarca, zona_educativa,
            coordenades_utm_x, coordenades_utm_y,
            coordenades_geo_x, coordenades_geo_y)) |> # eliminar columnes que no calen
  rename("operator" = "nom_titularitat",
         "name" = "denominaci_completa",
         "ref" = "codi_centre",
         "contact:phone" = "tel_fon",
         "contact:fax" = "fax",
         "contact:email" = "e_mail_centre",
         "website" = "url",
         "addr:city" = "nom_municipi",
         "addr:place" = "nom_localitat",
         "addr:postcode" = "codi_postal",
         "source:date" = "any") |> # canviar noms de columnes que podem adaptar "tal qual"
  mutate("contact:fax" = paste0("+34",`contact:fax`),
         "contact:phone" = paste0("+34", `contact:phone`),
         "addr:street" = str_extract(adre_a, "^[^\\,]+"),
         "addr:housenumber" = str_extract(adre_a, "[^\\, ]+$"),
         "operator:type" = ifelse(nom_naturalesa == "Públic", "public", "private"))
knitr::kable(escoles_gene_osm, style = "pipe")
```


Veureu per això, que he deixat unes quantes columnes sense tractar, que tenen a veure amb quins cicles imparteixen. A partir d'això, cal generar tres variables més. ```isced:level```, que estandarditza els nivells d'educació a nivell mundial (podeu veure'n totes les equivalències [aquí](http://uis.unesco.org/sites/default/files/documents/international-standard-classification-of-education-1997-en_0.pdf)), ```min_age``` (edat mínima), ```max_age``` (edat màxima), ```school``` el tipus d'escola i ```amenity``` on distingim entre escoles bressol, escoles de música elementals, d'idiomes o escoles de qualsevol altre tipus. Primer de tot, copiem la taula d'equivalències de la [wiki d'OpenStreetMap.](https://wiki.openstreetmap.org/wiki/Import_schools_in_Catalunya)


```{r}
eqs <- "https://wiki.openstreetmap.org/wiki/Import_schools_in_Catalunya" |> 
  read_html() |> 
  html_nodes(xpath = '/html/body/div[3]/div[3]/div[5]/div[1]/table[2]') |> 
  html_table()
eqs <- eqs[[1]] |> 
  mutate(Cycle = str_split(Cycle, ", ")) |> 
  unnest(cols = Cycle) |> 
  mutate(Cycle = str_to_lower(Cycle))
knitr::kable(eqs, style = "pipe")
```



Ara ja podem generar les columnes que falten.

```{r}
escoles_gene_isced <- escoles_gene |> 
  select("codi_centre", "epri", "einf1c", "einf2c", "eso", "batx", "cfpm", "aa03", "cfps", "pfi") |> 
  pivot_longer(-codi_centre,
               names_to = "level_name",
               values_to = "junk") |> 
  filter(!is.na(junk)) |> 
  select(-junk) |> 
  left_join(eqs, by = c("level_name" = "Cycle")) |> 
  mutate("school" = case_when(level_name %in% c("einf1c", "einf2c") ~ NA_character_,
                              level_name == "epri" ~ "primary",
                              level_name %in% c("eso", "batx") ~ "secondary",
                              level_name %in% c("aa01", "cfpm", "ppas", 
                                                "aa03", "cfps", "pfi", "pa01",
                                                "cfam", "pa02", "cfas",
                                                "esdi", "adr", "crbc",
                                                "dans", "musp", "muss",
                                                "tegm", "tegs") ~ "professional",
                              level_name == "ee" ~ "special_education_needs",
                              TRUE ~ NA_character_),
         "amenity" = case_when(level_name %in% c("einf1c", "einf2c") ~ "kindergarten",
                               level_name == "muse" ~ "music_school",
                               level_name == "dane" ~ NA_character_,
                               level_name == "idi" ~ "language_school",
                               TRUE ~ "school")) |> 
  arrange(`ISCED level`) |> 
  group_by(codi_centre) |> 
  summarise("isced:level" = paste(unique(`ISCED level`), collapse = "; "),
            "min_age" = min(min_age),
            "max_age" = ifelse(length(c(max_age)[is.na(c(max_age))]) > 0, NA_integer_,max(max_age)),
            "amenity" = paste(unique(`amenity`), collapse = "; "),
            "school" = paste(unique(school)[!is.na(c(unique(school)))], collapse = "; "))
knitr::kable(escoles_gene_isced, style = "pipe")
```


Ara només queda generar una taula única i ja tenim totes les dades preparades per a importar-les a OpenStreetMap amb JOSM o qualsevol altra eina.

```{r}
escoles_gene_osm <- escoles_gene_osm |> 
  select(-c("epri", "einf1c", "einf2c", "eso", "batx", "cfpm", "aa03", "cfps", "pfi", "nom_naturalesa", "adre_a")) |> 
  left_join(escoles_gene_isced, by = c("ref" = "codi_centre"))
knitr::kable(escoles_gene_osm, style = "pipe")
```


Trobareu el codi per això i per altres coses d'OpenStreetMap al meu [GitHub](https://github.com/marcboschmatas/coses_openstreetmap)